package com.noyon.main.jwt;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.filter.OncePerRequestFilter;

import com.noyon.main.service.impl.MyUserDetailsService;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class JwtAuthFilter extends OncePerRequestFilter {

	  @Autowired
	    private JwtService jwtService;

	    @Autowired
	    private MyUserDetailsService myUserDetailsService;

	    @Override
	    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
	        final String authHeader = request.getHeader("Authorization");
	        final String jwtToken;
	        final String userEmail;
	        if (authHeader == null || authHeader.isBlank()) {
	            filterChain.doFilter(request, response);
	            return;
	        }

	        jwtToken = authHeader.substring(7);
	        userEmail = jwtService

	        if (userEmail != null && SecurityContextHolder.getContext().getAuthentication() == null) {
	            UserDetails userDetails = customUserDetailsService.loadUserByUsername(userEmail);

	            if (jwtUtils.isValidToken(jwtToken, userDetails)) {
	                SecurityContext securityContext = SecurityContextHolder.createEmptyContext();
	                UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(
	                        userDetails, null, userDetails.getAuthorities());
	                token.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
	                securityContext.setAuthentication(token);
	                SecurityContextHolder.setContext(securityContext);
	            }
	        }
	        filterChain.doFilter(request, response);
	    }
}
